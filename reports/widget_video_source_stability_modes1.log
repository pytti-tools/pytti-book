Traceback (most recent call last):
  File "/home/dmarx/.local/share/virtualenvs/pytti-book-l72HEyWC/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/dmarx/.local/share/virtualenvs/pytti-book-l72HEyWC/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/dmarx/.local/share/virtualenvs/pytti-book-l72HEyWC/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/dmarx/.local/share/virtualenvs/pytti-book-l72HEyWC/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/dmarx/.local/share/virtualenvs/pytti-book-l72HEyWC/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/dmarx/.local/share/virtualenvs/pytti-book-l72HEyWC/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/dmarx/.local/share/virtualenvs/pytti-book-l72HEyWC/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import re
from pathlib import Path

from IPython.display import display, clear_output, Image, Video
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import panel as pn

pn.extension()

#########

outputs_root = Path('images_out')
folder_prefix = 'exp_video_basic_stability_modes'
folders = list(outputs_root.glob(f'{folder_prefix}_*'))


def format_val(v):
    try:
        v = float(v)
        if int(v) == v:
            v = int(v)
    except:
        pass
    return v

def parse_folder_name(folder):
    metadata_string = folder.name[1+len(folder_prefix):]
    pattern = r"_?([a-zA-Z_]+)-(True|False|[0-9.]+)"
    matches = re.findall(pattern, metadata_string)
    d_ = {k:format_val(v) for k,v in matches}
    d_['fpath'] = folder
    d_['n_images'] = len(list(folder.glob('*.png')))
    return d_

df_meta = pd.DataFrame([parse_folder_name(f) for f in folders])

variant_names = [v for v in df_meta.columns.tolist() if v not in ['fpath']]
variant_ranges = {v:df_meta[v].unique() for v in variant_names}
[v.sort() for v in variant_ranges.values()]


##########################################

n_imgs_per_group = 20

def setting_name_shorthand(setting_name):
    return ''.join([tok[0] for tok in setting_name.split('_')])

decoded_setting_name = {
    'ref': 'reencode_each_frame',
    'dsw': 'direct_stabilization_weight',
    'ssw': 'semantic_stabilization_weight',
}

kargs = {k:pn.widgets.DiscreteSlider(name=decoded_setting_name[k], options=list(v), value=v[0]) for k,v in variant_ranges.items()}
kargs['i'] = pn.widgets.Player(interval=300, name='step', start=1, end=n_imgs_per_group, step=1, value=1, loop_policy='reflect')


url_prefix = "https://raw.githubusercontent.com/dmarx/pytti-settings-test/main/images_out/"
image_paths = [str(p) for p in Path('images_out').glob('**/*.png')]
d_image_urls = {im_path:im_path.replace('images_out/', url_prefix) for im_path in image_paths}

##########

@pn.interact(
    **kargs
)
def display_images(
    ref,
    dsw,
    ssw,
    i,
):
    folder = df_meta[
        (ref == df_meta['ref']) &
        (dsw == df_meta['dsw']) &
        (ssw == df_meta['ssw'])
    ]['fpath'].values[0]
    im_path = str(folder / f"{folder.name}_{i}.png")
    #im_url = im_path
    im_url = d_image_urls[im_path]
    return pn.pane.HTML(f'<img src="{im_url}" width="700">', width=700, height=350, sizing_mode='fixed')

pn.panel(display_images, height=1000).embed(max_opts=n_imgs_per_group, max_states=999999999)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 57>[0;34m()[0m
[1;32m     49[0m     [38;5;28;01mreturn[39;00m [38;5;124m'[39m[38;5;124m'[39m[38;5;241m.[39mjoin([tok[[38;5;241m0[39m] [38;5;28;01mfor[39;00m tok [38;5;129;01min[39;00m setting_name[38;5;241m.[39msplit([38;5;124m'[39m[38;5;124m_[39m[38;5;124m'[39m)])
[1;32m     51[0m decoded_setting_name [38;5;241m=[39m {
[1;32m     52[0m     [38;5;124m'[39m[38;5;124mref[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mreencode_each_frame[39m[38;5;124m'[39m,
[1;32m     53[0m     [38;5;124m'[39m[38;5;124mdsw[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mdirect_stabilization_weight[39m[38;5;124m'[39m,
[1;32m     54[0m     [38;5;124m'[39m[38;5;124mssw[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124msemantic_stabilization_weight[39m[38;5;124m'[39m,
[1;32m     55[0m }
[0;32m---> 57[0m kargs [38;5;241m=[39m {k:pn[38;5;241m.[39mwidgets[38;5;241m.[39mDiscreteSlider(name[38;5;241m=[39mdecoded_setting_name[k], options[38;5;241m=[39m[38;5;28mlist[39m(v), value[38;5;241m=[39mv[[38;5;241m0[39m]) [38;5;28;01mfor[39;00m k,v [38;5;129;01min[39;00m variant_ranges[38;5;241m.[39mitems()}
[1;32m     58[0m kargs[[38;5;124m'[39m[38;5;124mi[39m[38;5;124m'[39m] [38;5;241m=[39m pn[38;5;241m.[39mwidgets[38;5;241m.[39mPlayer(interval[38;5;241m=[39m[38;5;241m300[39m, name[38;5;241m=[39m[38;5;124m'[39m[38;5;124mstep[39m[38;5;124m'[39m, start[38;5;241m=[39m[38;5;241m1[39m, end[38;5;241m=[39mn_imgs_per_group, step[38;5;241m=[39m[38;5;241m1[39m, value[38;5;241m=[39m[38;5;241m1[39m, loop_policy[38;5;241m=[39m[38;5;124m'[39m[38;5;124mreflect[39m[38;5;124m'[39m)
[1;32m     61[0m url_prefix [38;5;241m=[39m [38;5;124m"[39m[38;5;124mhttps://raw.githubusercontent.com/dmarx/pytti-settings-test/main/images_out/[39m[38;5;124m"[39m

Input [0;32mIn [1][0m, in [0;36m<dictcomp>[0;34m(.0)[0m
[1;32m     49[0m     [38;5;28;01mreturn[39;00m [38;5;124m'[39m[38;5;124m'[39m[38;5;241m.[39mjoin([tok[[38;5;241m0[39m] [38;5;28;01mfor[39;00m tok [38;5;129;01min[39;00m setting_name[38;5;241m.[39msplit([38;5;124m'[39m[38;5;124m_[39m[38;5;124m'[39m)])
[1;32m     51[0m decoded_setting_name [38;5;241m=[39m {
[1;32m     52[0m     [38;5;124m'[39m[38;5;124mref[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mreencode_each_frame[39m[38;5;124m'[39m,
[1;32m     53[0m     [38;5;124m'[39m[38;5;124mdsw[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mdirect_stabilization_weight[39m[38;5;124m'[39m,
[1;32m     54[0m     [38;5;124m'[39m[38;5;124mssw[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124msemantic_stabilization_weight[39m[38;5;124m'[39m,
[1;32m     55[0m }
[0;32m---> 57[0m kargs [38;5;241m=[39m {k:pn[38;5;241m.[39mwidgets[38;5;241m.[39mDiscreteSlider(name[38;5;241m=[39m[43mdecoded_setting_name[49m[43m[[49m[43mk[49m[43m][49m, options[38;5;241m=[39m[38;5;28mlist[39m(v), value[38;5;241m=[39mv[[38;5;241m0[39m]) [38;5;28;01mfor[39;00m k,v [38;5;129;01min[39;00m variant_ranges[38;5;241m.[39mitems()}
[1;32m     58[0m kargs[[38;5;124m'[39m[38;5;124mi[39m[38;5;124m'[39m] [38;5;241m=[39m pn[38;5;241m.[39mwidgets[38;5;241m.[39mPlayer(interval[38;5;241m=[39m[38;5;241m300[39m, name[38;5;241m=[39m[38;5;124m'[39m[38;5;124mstep[39m[38;5;124m'[39m, start[38;5;241m=[39m[38;5;241m1[39m, end[38;5;241m=[39mn_imgs_per_group, step[38;5;241m=[39m[38;5;241m1[39m, value[38;5;241m=[39m[38;5;241m1[39m, loop_policy[38;5;241m=[39m[38;5;124m'[39m[38;5;124mreflect[39m[38;5;124m'[39m)
[1;32m     61[0m url_prefix [38;5;241m=[39m [38;5;124m"[39m[38;5;124mhttps://raw.githubusercontent.com/dmarx/pytti-settings-test/main/images_out/[39m[38;5;124m"[39m

[0;31mKeyError[0m: 'n_images'
KeyError: 'n_images'

